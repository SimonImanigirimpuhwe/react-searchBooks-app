{"version":3,"sources":["component/BookCard.js","component/BookList.js","component/SearchBox.js","component/Scroll.js","container/App.js","component/ErrorBoundry.js","serviceWorker.js","index.js"],"names":["BookCard","title","img","author","page","language","link","className","alt","src","href","BookList","books","map","book","key","id","volumeInfo","imageLinks","thumbnail","authors","pageCount","infoLink","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","App","onsearchChange","e","setState","target","value","state","fetch","then","response","json","console","log","this","url","items","callback","filtteredBook","filter","undefined","toLowerCase","includes","Component","ErrorBoundry","hasError","error","info","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.509ac9fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BookCard.css';\r\n\r\n\r\nconst BookCard = ({ title, img, author, page, language, link }) => {\r\n    \r\n    return (\r\n        <div className='book-card'>\r\n             <ul>\r\n                <li><h2>{title}</h2></li>\r\n                <li><img alt='book'src={img}/></li>\r\n                <li><span>Author: </span>{author}</li>\r\n                <li><span>Pages: </span>{page}</li>\r\n                <li><span>Language: </span>{language}</li>\r\n                <button className=\"btn\"><a href={link}>Read More</a></button>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookCard;","import React from 'react';\r\nimport BookCard from '../component/BookCard';\r\n\r\n\r\nconst BookList  = ({ books }) => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='books'>\r\n                {\r\n                    books.map(book => {\r\n                        return (\r\n                        <BookCard  \r\n                            key={book.id} \r\n                            title={book.volumeInfo.title}\r\n                            img={book.volumeInfo.imageLinks.thumbnail}\r\n                            author={book.volumeInfo.authors}\r\n                            page={book.volumeInfo.pageCount}\r\n                            language={book.volumeInfo.language}\r\n                            link={book.volumeInfo.infoLink}\r\n                            />\r\n                            )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({searchfield, searchChange }) => {\r\n    return (\r\n        <div className='title'>\r\n            <input \r\n            type='search' \r\n            id='search' \r\n            placeholder='Search for books' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div \r\n        style={{overflowY :'scroll', \r\n        borderTop: '3px solid black', \r\n        height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport BookList from '../component/BookList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scroll from '../component/Scroll';\r\n\r\n\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super();\r\n      this.state={\r\n        books: [],\r\n        searchfield: ''\r\n      }\r\n    }\r\n    componentDidMount(){\r\n        const url ='https://www.googleapis.com/books/v1/volumes?q=psychology/'\r\n        fetch(url)\r\n            .then(response =>response.json())\r\n            .then(book => this.state.books) \r\n            console.log('componedDidMount') \r\n    }\r\n    componentDidUpdate(){\r\n        if (this.state.searchfield === ''){\r\n            return;\r\n        }else{\r\n            console.log('cool')\r\n            const url =`https://www.googleapis.com/books/v1/volumes?q=psychology/${this.state.searchfield}`\r\n            console.log(this.state.searchfield)\r\n            fetch(url)\r\n                .then(response =>response.json())\r\n                .then(book => this.setState({books: book.items}))\r\n        }\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n        this.setState = (state, callback) => {\r\n            return;\r\n        }\r\n    }\r\n    onsearchChange = (e) => {\r\n       this.setState({searchfield: e.target.value})\r\n    }\r\n\r\n   render(){\r\n       \r\n           console.log('filtered')\r\n            const filtteredBook = this.state.books.filter(book =>{\r\n                if(this.state.books === undefined){\r\n                    console.log('no book found')\r\n                }\r\n                return book.volumeInfo.title.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n            }) \r\n        return (\r\n            <div>\r\n                <h1 className='title'>Psychology Books</h1>\r\n                <SearchBox searchChange={this.onsearchChange}/>\r\n                <Scroll>\r\n                    <BookList books={filtteredBook}/>\r\n                </Scroll>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n    \r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Something went wrong</h1>\r\n        }else{\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport ErrorBoundry from './component/ErrorBoundry';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundry>\n      <App />\n    </ErrorBoundry>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}